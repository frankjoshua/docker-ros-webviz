{"version":3,"sources":["/home/josh/development/workspace/webviz/packages/webviz-core/src/panels/NodePlayground/Editor.js"],"names":["codeEditorService","StaticServices","get","gotoSelection","editor","selection","endLineNumber","endColumn","setSelection","revealRangeInCenter","pos","lineNumber","startLineNumber","column","startColumn","setPosition","revealPositionInCenter","projectConfig","getNodeProjectConfig","script","setScriptCode","vimMode","resizeKey","save","setScriptOverride","rosLib","editorRef","React","useRef","vimModeRef","useEffect","current","initVimMode","dispose","monacoApi","languages","typescript","typescriptDefaults","addExtraLib","fileName","doOpenEditor","useCallback","input","requestedModel","getModel","resource","uri","path","filePath","code","getValue","readOnly","options","undefined","Uri","parse","model","createModel","setModel","useMemo","wordWrap","minimap","enabled","willMount","monaco","defineTheme","vsWebvizTheme","setEagerModelSync","javascriptDefaults","declarations","forEach","lib","sourceCode","utilityFiles","sourceFile","updateOptions","tabSize","didMount","addAction","id","label","keybindings","KeyMod","CtrlCmd","KeyCode","KEY_S","run","onChange","scr","key","language","theme","editorWillMount","editorDidMount"],"mappings":"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","file":"node-playground-editor.js","sourcesContent":["// @flow\n//\n//  Copyright (c) 2019-present, Cruise LLC\n//\n//  This source code is licensed under the Apache License, Version 2.0,\n//  found in the LICENSE file in the root directory of this source tree.\n//  You may not use this file except in compliance with the License.\n\nimport * as monacoApi from \"monaco-editor/esm/vs/editor/editor.api\";\nimport { StaticServices } from \"monaco-editor/esm/vs/editor/standalone/browser/standaloneServices\";\nimport { initVimMode } from \"monaco-vim\";\nimport * as React from \"react\";\nimport MonacoEditor from \"react-monaco-editor\";\n\nimport type { Script, EditorSelection } from \"webviz-core/src/panels/NodePlayground/script\";\nimport vsWebvizTheme from \"webviz-core/src/panels/NodePlayground/theme/vs-webviz.json\";\nimport { getNodeProjectConfig } from \"webviz-core/src/players/UserNodePlayer/nodeTransformerWorker/typescript/projectConfig\";\n\nconst VS_WEBVIZ_THEME = \"vs-webviz\";\n\nconst codeEditorService = StaticServices.codeEditorService.get();\n\ntype Props = {|\n  script: Script | null,\n  setScriptCode: (code: string) => void,\n  vimMode: boolean,\n  rosLib: string,\n  /* A minor hack to tell the monaco editor to resize when dimensions change. */\n  resizeKey: string,\n  save: (code: string) => void,\n  setScriptOverride: (script: Script) => void,\n|};\n\n// Taken from:\n// https://github.com/microsoft/vscode/blob/master/src/vs/editor/standalone/browser/standaloneCodeServiceImpl.ts\nconst gotoSelection = (editor: monacoApi.Editor, selection?: EditorSelection) => {\n  if (selection) {\n    if (selection.endLineNumber && selection.endColumn) {\n      // These fields indicate a range was selected, set the range and reveal it.\n      editor.setSelection(selection);\n      editor.revealRangeInCenter(selection, 1 /* Immediate */);\n    } else {\n      // Otherwise it's just a position\n      const pos = {\n        lineNumber: selection.startLineNumber,\n        column: selection.startColumn,\n      };\n      editor.setPosition(pos);\n      editor.revealPositionInCenter(pos, 1 /* Immediate */);\n    }\n  }\n};\n\nconst projectConfig = getNodeProjectConfig();\nconst Editor = ({ script, setScriptCode, vimMode, resizeKey, save, setScriptOverride, rosLib }: Props) => {\n  const editorRef = React.useRef<monacoApi.Editor>(null);\n  const vimModeRef = React.useRef(null);\n  React.useEffect(\n    () => {\n      if (editorRef.current) {\n        if (vimMode) {\n          vimModeRef.current = initVimMode(editorRef.current);\n        } else if (vimModeRef.current) {\n          // Turn off VimMode.\n          vimModeRef.current.dispose();\n        }\n      }\n    },\n    [vimMode]\n  );\n\n  React.useEffect(\n    () => {\n      monacoApi.languages.typescript.typescriptDefaults.addExtraLib(\n        rosLib,\n        `file:///node_modules/@types/${projectConfig.rosLib.fileName}`\n      );\n    },\n    [rosLib]\n  );\n\n  /*\n  In order to support go-to across files we override the code editor service doOpenEditor method.\n  Default implementation checks if the requested resource is the current model and no ops if it isn't.\n  Our implementation looks across all of our models to find the one requested and then queues that as\n  an override along with the requested selection (containing line # etc). When we're told to load\n  this override script we'll end up loading the model in the useEffect below, and then using this\n  selection to move to the correct line.\n  */\n  codeEditorService.doOpenEditor = React.useCallback(\n    (editor, input) => {\n      const requestedModel = monacoApi.editor.getModel(input.resource);\n      if (!requestedModel) {\n        return editor;\n      }\n\n      // If we are jumping to a definition within the user node, don't push\n      // to script override.\n      if (requestedModel.uri.path === script?.filePath) {\n        gotoSelection(editor, input.options.selection);\n        return;\n      }\n\n      setScriptOverride({\n        filePath: requestedModel.uri.path,\n        code: requestedModel.getValue(),\n        readOnly: true,\n        selection: input.options ? input.options.selection : undefined,\n      });\n      return editor;\n    },\n    [script, setScriptOverride]\n  );\n\n  React.useEffect(\n    () => {\n      const editor = editorRef.current;\n      if (!editorRef || !script) {\n        return;\n      }\n      const filePath = monacoApi.Uri.parse(`file://${script.filePath}`);\n      const model =\n        monacoApi.editor.getModel(filePath) || monacoApi.editor.createModel(script.code, \"typescript\", filePath);\n\n      editor.setModel(model);\n\n      gotoSelection(editor, script.selection);\n    },\n    [script]\n  );\n\n  const options = React.useMemo(\n    () => {\n      return {\n        wordWrap: \"on\",\n        minimap: {\n          enabled: false,\n        },\n        readOnly: script?.readOnly,\n      };\n    },\n    [script]\n  );\n\n  const willMount = React.useCallback(\n    (monaco) => {\n      if (!script) {\n        return;\n      }\n      monaco.editor.defineTheme(VS_WEBVIZ_THEME, vsWebvizTheme);\n      // Set eager model sync to enable intellisense between the user code and utility files\n      monaco.languages.typescript.typescriptDefaults.setEagerModelSync(true);\n      monaco.languages.typescript.javascriptDefaults.setEagerModelSync(true);\n\n      // Load declarations and additional utility files from project config\n\n      // This ensures the type defs we enforce in\n      // the 'compile' step match that of monaco. Adding the 'lib'\n      // this way (instead of specifying it in the compiler options)\n      // is a hack to overwrite the default type defs since the\n      // typescript language service does not expose such a method.\n      projectConfig.declarations.forEach((lib) =>\n        monaco.languages.typescript.typescriptDefaults.addExtraLib(\n          lib.sourceCode,\n          `file:///node_modules/@types/${lib.fileName}`\n        )\n      );\n      projectConfig.utilityFiles.forEach((sourceFile) => {\n        const filePath = monacoApi.Uri.parse(`file://${sourceFile.filePath}`);\n        const model =\n          monaco.editor.getModel(filePath) || monaco.editor.createModel(sourceFile.sourceCode, \"typescript\", filePath);\n        model.updateOptions({ tabSize: 2 });\n      });\n\n      const filePath = monacoApi.Uri.parse(`file://${script.filePath}`);\n      const model = monaco.editor.getModel(filePath) || monaco.editor.createModel(script.code, \"typescript\", filePath);\n\n      // Because anything else is blasphemy.\n      model.updateOptions({ tabSize: 2 });\n      return {\n        model,\n      };\n    },\n    [script]\n  );\n\n  const didMount = React.useCallback(\n    (editor) => {\n      editorRef.current = editor;\n      if (vimMode) {\n        vimModeRef.current = initVimMode(editorRef.current);\n      }\n      editor.addAction({\n        id: \"ctrl-s\",\n        label: \"Save current node\",\n        keybindings: [monacoApi.KeyMod.CtrlCmd | monacoApi.KeyCode.KEY_S],\n        run: () => {\n          if (editorRef?.current) {\n            const model = editorRef.current.getModel();\n            if (model && script && !script.readOnly) {\n              save(model.getValue());\n            }\n          }\n        },\n      });\n    },\n    [save, script, vimMode]\n  );\n\n  const onChange = React.useCallback(\n    (scr: string) => {\n      setScriptCode(scr);\n    },\n    [setScriptCode]\n  );\n\n  if (!script) {\n    // No script to load\n    return null;\n  }\n\n  return (\n    <MonacoEditor\n      key={resizeKey}\n      language=\"typescript\"\n      theme={VS_WEBVIZ_THEME}\n      editorWillMount={willMount}\n      editorDidMount={didMount}\n      options={options}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default Editor;\n"],"sourceRoot":""}